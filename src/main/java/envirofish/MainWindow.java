/*
 * MainWindow.java
 *
 * Created on March 24, 2005, 8:10 AM
 */

package envirofish;

/**
 *
 * @author  b4edhdwj
 */

import hec.heclib.dss.*;
import hec.heclib.util.*;
import hec.io.*;

import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.prefs.Preferences;


public class MainWindow extends javax.swing.JFrame {
    
    /** Creates new form MainWindow */
    public MainWindow() {
        init();
        initComponents();
    }
    
    public void finalize() throws Throwable
    {
        closeDSSFile();
        
        super.finalize();
    }
    
    private void init()
    {
        catagoryWindow = new CatagoryWindow();
        aboutWindow = new AboutWindow();
        
        lastFile = null;
        fileLoaded = false;
        
        prefs = Preferences.userNodeForPackage(MainWindow.class);
        
        // Get the Stage data prefernece strings
        stageDataStrings = prefs.get("Stage Data Strings","ELEV");
        
        // Get the Stage Area preference strings
        stageAreaStrings = prefs.get("Stage Area Strings","ELEV-AREA");
 
        // Get the last file opened   
        String tmp = prefs.get("Last DSS File Opened","");
        if ( tmp.equals("") == false)
        {
            lastFile = new java.io.File(tmp);
        }
        
        // Get the ouput directory
        outputDirPath = prefs.get("Output Directory","");
      
        // the the Durations to use
        periodDays = prefs.getInt("Duration",8);
        
        // the spawning depth range
        maxDepth = prefs.getDouble("Max Depth",10);
        minDepth = prefs.getDouble("Min Depth",1);
   
        // the rearing depth range
        maxRearingDepth = prefs.getDouble("Max Rearing Depth",2);
        minRearingDepth = prefs.getDouble("Min Rearing Depth",0);
           
        // Get the season info
        seasonStartMonth = prefs.getInt("Season Start Month",3);
        seasonStopMonth = prefs.getInt("Season Stop Month",6);     
        seasonStartDay = prefs.getInt("Season Start Day",1);
        seasonStopDay = prefs.getInt("Season Stop Day",30);
        
        // Get Nests Condition
        orphanedNests = prefs.getBoolean("Orphaned Nests",false);
        deepNests = prefs.getBoolean("Deep Nests",true);
        
        //Get Debug Conditions
        recordDaily = prefs.getBoolean("Record Daily",false); 
        stageDataStr = stageDataStrings.split(":");
        
        // force the stage area stings to update
        if (fileLoaded)
        {
            loadDSSFile();
        }
    }
    
    void resetPrefs()
    {
        // set the variables
        stageDataStrings = "ELEV";
        stageAreaStrings = "ELEV-AREA";
        maxDepth = 10;
        minDepth =  1;
        periodDays = 8;
        maxRearingDepth = 2;
        minRearingDepth = 0;
        seasonStartMonth = 3;
        seasonStopMonth = 6;
        seasonStartDay = 1;
        seasonStopDay = 30;
        orphanedNests = false;
        deepNests = true;
        recordDaily = false;
        
        // set the preferences
        prefs.put("Stage Data Strings",stageDataStrings);
        prefs.get("Stage Area Strings",stageAreaStrings);
        prefs.putInt("Duration",periodDays);
        prefs.putDouble("Max Depth",maxDepth);
        prefs.putDouble("Min Depth",minDepth);
        prefs.putDouble("Max Rearing Depth",maxRearingDepth);
        prefs.putDouble("Min Rearing Depth",minRearingDepth);
        prefs.putInt("Season Start Month",seasonStartMonth);
        prefs.putInt("Season Stop Month",seasonStopMonth);
        prefs.putInt("Season Start Day",seasonStartDay);
        prefs.putInt("Season Stop Day",seasonStopDay);
        prefs.putBoolean("Orphaned Nests",orphanedNests);
        prefs.putBoolean("Deep Nests",deepNests);
        prefs.putBoolean("Record Daily",recordDaily);
        
        
        //set the GUI
        
        //spawning Depth
        jMaxDepthText.setValue(maxDepth);
        jMinDepthText.setValue(minDepth);
        
        //rearing Depth
        jMaxRearingDepthText.setValue(maxRearingDepth);
        jMinRearingDepthText.setValue(minRearingDepth);
        
        //season duration
        jSeasonField.setText("" + seasonStartMonth + "/" + seasonStartDay + " - "
                        + seasonStopMonth +  "/" + seasonStopDay);
        
        //boolean flags
        jOrphanedNestsCBox.setSelected(orphanedNests);
        jDeepNestsCBox.setSelected(deepNests);
        jCalcDailyCBox.setSelected(recordDaily);
        
        
        
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {
        jFilePanel = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jDSSFilename = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jDssFileBrowseButton = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jPanel12 = new javax.swing.JPanel();
        jOutputPathField = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jOutputPathButton = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jStagePathPanel = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jStageTable = new javax.swing.JTable();
        jStageTable.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent e) {
                jStageTableValueChanged(e);
            }
        });
        jPanel17 = new javax.swing.JPanel();
        jSpacer1 = new javax.swing.JPanel();
        jCurvePathPanel = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jAreaTable = new javax.swing.JTable();
        jPanel19 = new javax.swing.JPanel();
        jSpacer2 = new javax.swing.JPanel();
        jControls1Panel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jSpawningPanel = new javax.swing.JPanel();
        df3 = new javax.swing.text.NumberFormatter(new DecimalFormat("#.0###"));
        df3.setAllowsInvalid(false);
        df3.setValueClass(Double.class);
        jMinDepthText = new javax.swing.JFormattedTextField(df3);
        jLabel7 = new javax.swing.JLabel();
        df2 = new javax.swing.text.NumberFormatter(new DecimalFormat("#.0###"));
        df2.setAllowsInvalid(false);
        df2.setValueClass(Double.class);
        jMaxDepthText = new javax.swing.JFormattedTextField(df2);
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        df = new javax.swing.text.NumberFormatter();
        df.setAllowsInvalid(false);
        df.setValueClass(Integer.class);
        jDurField = new javax.swing.JFormattedTextField(df);
        jPanel3 = new javax.swing.JPanel();
        jSeasonPanel = new javax.swing.JPanel();
        try
        {
            yf1 = new javax.swing.text.MaskFormatter("####");
            yf1.setCommitsOnValidEdit(true);

        }
        catch (ParseException pe1)
        {
            yf1 = new javax.swing.text.MaskFormatter();
        }
        jStartText = new javax.swing.JFormattedTextField(yf1);
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        try
        {
            yf2 = new javax.swing.text.MaskFormatter("####");
            yf2.setCommitsOnValidEdit(true);

        }
        catch (ParseException pe1)
        {
            yf2 = new javax.swing.text.MaskFormatter();
        }
        jStopText = new javax.swing.JFormattedTextField(yf2);
        jButton1 = new javax.swing.JButton();
        jSeasonField = new javax.swing.JTextField();
        jSeasonField.setText("" + seasonStartMonth + "/" + seasonStartDay + " - "
            + seasonStopMonth +  "/" + seasonStopDay);
        jLabel4 = new javax.swing.JLabel();
        jPanel20 = new javax.swing.JPanel();
        jCatagoriesButton = new javax.swing.JButton();
        jControls2Panel = new javax.swing.JPanel();
        jPanel21 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        df4 = new javax.swing.text.NumberFormatter(new DecimalFormat("#.0###"));
        df4.setAllowsInvalid(false);
        df4.setValueClass(Double.class);
        jMinRearingDepthText = new javax.swing.JFormattedTextField(df4);
        jLabel9 = new javax.swing.JLabel();
        df5 = new javax.swing.text.NumberFormatter(new DecimalFormat("#.0###"));
        df5.setAllowsInvalid(false);
        df5.setValueClass(Double.class);
        jMaxRearingDepthText = new javax.swing.JFormattedTextField(df5);
        jLabel10 = new javax.swing.JLabel();
        jPanel22 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jOrphanedNestsCBox = new javax.swing.JCheckBox();
        jDeepNestsCBox = new javax.swing.JCheckBox();
        jCalcDailyCBox = new javax.swing.JCheckBox();
        jCalcDailyCBox.getModel().setSelected(recordDaily);
        jRetainPeriodCBox = new javax.swing.JCheckBox();
        jRunButton = new javax.swing.JButton();
        jPanel23 = new javax.swing.JPanel();
        jMenuBar = new javax.swing.JMenuBar();
        jFileMenu = new javax.swing.JMenu();
        jOpenMenuItem = new javax.swing.JMenuItem();
        jPrefsItems = new javax.swing.JMenuItem();
        jAboutItem = new javax.swing.JMenuItem();

        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.Y_AXIS));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Enviro Fish");
        jFilePanel.setLayout(new javax.swing.BoxLayout(jFilePanel, javax.swing.BoxLayout.Y_AXIS));

        jFilePanel.setMaximumSize(new java.awt.Dimension(32767, 90));
        jFilePanel.setMinimumSize(new java.awt.Dimension(640, 90));
        jFilePanel.setPreferredSize(new java.awt.Dimension(640, 90));
        jPanel5.setLayout(new javax.swing.BoxLayout(jPanel5, javax.swing.BoxLayout.X_AXIS));

        jPanel5.add(jPanel6);

        jLabel1.setText("DSS File");
        jLabel1.setMaximumSize(new java.awt.Dimension(70, 14));
        jLabel1.setMinimumSize(new java.awt.Dimension(70, 14));
        jLabel1.setPreferredSize(new java.awt.Dimension(70, 14));
        jPanel5.add(jLabel1);
        jLabel1.getAccessibleContext().setAccessibleName("");

        jPanel5.add(jPanel7);

        jDSSFilename.setToolTipText("The path to the DSS File");
        jDSSFilename.setMaximumSize(new java.awt.Dimension(2147483647, 19));
        jPanel5.add(jDSSFilename);

        jPanel5.add(jPanel8);

        jDssFileBrowseButton.setText("Browse ...");
        jDssFileBrowseButton.setToolTipText("Select a DSS file");
        jDssFileBrowseButton.setMaximumSize(new java.awt.Dimension(90, 23));
        jDssFileBrowseButton.setMinimumSize(new java.awt.Dimension(90, 23));
        jDssFileBrowseButton.setPreferredSize(new java.awt.Dimension(90, 23));
        jDssFileBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MainWindow.this.actionPerformed(evt);
            }
        });

        jPanel5.add(jDssFileBrowseButton);

        jPanel5.add(jPanel9);

        jFilePanel.add(jPanel5);

        jPanel10.setLayout(new javax.swing.BoxLayout(jPanel10, javax.swing.BoxLayout.X_AXIS));

        jPanel10.add(jPanel11);

        jLabel8.setText("Output Path");
        jLabel8.setMaximumSize(new java.awt.Dimension(70, 14));
        jLabel8.setMinimumSize(new java.awt.Dimension(70, 14));
        jLabel8.setPreferredSize(new java.awt.Dimension(70, 14));
        jPanel10.add(jLabel8);

        jPanel10.add(jPanel12);

        jOutputPathField.setMaximumSize(new java.awt.Dimension(2147483647, 19));
        if ( ! outputDirPath.equals("") )
        {
            jOutputPathField.setText(outputDirPath);
        }
        jOutputPathField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOutputPathFieldActionPerformed(evt);
            }
        });

        jPanel10.add(jOutputPathField);

        jPanel10.add(jPanel13);

        jOutputPathButton.setText("Browse ...");
        jOutputPathButton.setMaximumSize(new java.awt.Dimension(90, 23));
        jOutputPathButton.setMinimumSize(new java.awt.Dimension(90, 23));
        jOutputPathButton.setPreferredSize(new java.awt.Dimension(90, 23));
        jOutputPathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOutputPathButtonActionPerformed(evt);
            }
        });

        jPanel10.add(jOutputPathButton);

        jPanel10.add(jPanel14);

        jFilePanel.add(jPanel10);

        jPanel15.setMaximumSize(new java.awt.Dimension(32767, 10));
        jFilePanel.add(jPanel15);

        getContentPane().add(jFilePanel);

        jStagePathPanel.setLayout(new javax.swing.BoxLayout(jStagePathPanel, javax.swing.BoxLayout.X_AXIS));

        jStagePathPanel.setMaximumSize(new java.awt.Dimension(32000, 32000));
        jStagePathPanel.setMinimumSize(new java.awt.Dimension(640, 140));
        jStagePathPanel.setPreferredSize(new java.awt.Dimension(640, 140));
        jPanel16.setMaximumSize(new java.awt.Dimension(10, 32767));
        jStagePathPanel.add(jPanel16);

        jStageTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "A Part", "B Part", "C Part", "D Part", "E Part", "F Part"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        stagePathsModel = (javax.swing.table.DefaultTableModel) jStageTable.getModel();
        jScrollPane1.setViewportView(jStageTable);

        jStagePathPanel.add(jScrollPane1);

        jPanel17.setMaximumSize(new java.awt.Dimension(10, 32767));
        jStagePathPanel.add(jPanel17);

        getContentPane().add(jStagePathPanel);

        jSpacer1.setMaximumSize(new java.awt.Dimension(32767, 10));
        getContentPane().add(jSpacer1);

        jCurvePathPanel.setLayout(new javax.swing.BoxLayout(jCurvePathPanel, javax.swing.BoxLayout.X_AXIS));

        jCurvePathPanel.setMaximumSize(new java.awt.Dimension(32000, 32000));
        jCurvePathPanel.setMinimumSize(new java.awt.Dimension(640, 150));
        jCurvePathPanel.setPreferredSize(new java.awt.Dimension(640, 150));
        jPanel18.setMaximumSize(new java.awt.Dimension(10, 32767));
        jCurvePathPanel.add(jPanel18);

        jAreaTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "A Part", "B Part", "C Part", "D Part", "E Part", "F Part"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        areaPathsModel = (javax.swing.table.DefaultTableModel) jAreaTable.getModel();
        jAreaTable.setOpaque(false);
        javax.swing.DefaultListSelectionModel sm1 = new javax.swing.DefaultListSelectionModel();
        sm1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jAreaTable.setSelectionModel(sm1);
        jAreaTable.getSelectionModel().addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent e) {
                jAreaTableValueChanged(e);
            }
        });
        jScrollPane2.setViewportView(jAreaTable);

        jCurvePathPanel.add(jScrollPane2);

        jPanel19.setMaximumSize(new java.awt.Dimension(10, 32767));
        jCurvePathPanel.add(jPanel19);

        getContentPane().add(jCurvePathPanel);

        jSpacer2.setMaximumSize(new java.awt.Dimension(32767, 10));
        getContentPane().add(jSpacer2);

        jControls1Panel.setLayout(new javax.swing.BoxLayout(jControls1Panel, javax.swing.BoxLayout.X_AXIS));

        jControls1Panel.setMaximumSize(new java.awt.Dimension(32000, 80));
        jControls1Panel.setMinimumSize(new java.awt.Dimension(640, 80));
        jControls1Panel.setPreferredSize(new java.awt.Dimension(640, 80));
        jPanel1.setMaximumSize(new java.awt.Dimension(10, 32767));
        jControls1Panel.add(jPanel1);

        jSpawningPanel.setLayout(null);

        jSpawningPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Spawing Constrants", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 0)));
        jSpawningPanel.setMaximumSize(new java.awt.Dimension(32000, 80));
        jSpawningPanel.setMinimumSize(new java.awt.Dimension(0, 80));
        jSpawningPanel.setPreferredSize(new java.awt.Dimension(0, 80));
        jMinDepthText.setValue(minDepth);
        jMinDepthText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMinDepthTextActionPerformed(evt);
            }
        });

        jSpawningPanel.add(jMinDepthText);
        jMinDepthText.setBounds(70, 20, 30, 20);

        jLabel7.setText("Max Depth");
        jSpawningPanel.add(jLabel7);
        jLabel7.setBounds(120, 20, 70, 14);

        jMaxDepthText.setValue(maxDepth);
        jMaxDepthText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMaxDepthTextActionPerformed(evt);
            }
        });

        jSpawningPanel.add(jMaxDepthText);
        jMaxDepthText.setBounds(180, 20, 30, 20);

        jLabel5.setText("Min Depth");
        jSpawningPanel.add(jLabel5);
        jLabel5.setBounds(10, 20, 60, 14);

        jLabel6.setText("Days");
        jSpawningPanel.add(jLabel6);
        jLabel6.setBounds(20, 60, 40, 10);

        jDurField.setToolTipText("");
        jDurField.setValue(periodDays);
        jDurField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDurFieldActionPerformed(evt);
            }
        });
        jDurField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jDurFieldFocusGained(evt);
            }
        });

        jSpawningPanel.add(jDurField);
        jDurField.setBounds(70, 50, 30, 20);

        jControls1Panel.add(jSpawningPanel);

        jPanel3.setMaximumSize(new java.awt.Dimension(10, 32767));
        jControls1Panel.add(jPanel3);

        jSeasonPanel.setLayout(null);

        jSeasonPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Season Constrants", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 0)));
        jSeasonPanel.setMaximumSize(new java.awt.Dimension(32000, 80));
        jSeasonPanel.setMinimumSize(new java.awt.Dimension(0, 80));
        jSeasonPanel.setPreferredSize(new java.awt.Dimension(0, 80));
        jStartText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jStartTextFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jStartTextFocusLost(evt);
            }
        });

        jSeasonPanel.add(jStartText);
        jStartText.setBounds(60, 20, 50, 20);

        jLabel2.setText("Period");
        jSeasonPanel.add(jLabel2);
        jLabel2.setBounds(10, 20, 40, 14);

        jLabel3.setText("to ");
        jSeasonPanel.add(jLabel3);
        jLabel3.setBounds(120, 20, 20, 14);

        jStopText.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jStopTextFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jStopTextFocusLost(evt);
            }
        });

        jSeasonPanel.add(jStopText);
        jStopText.setBounds(150, 20, 50, 20);

        jButton1.setText("Edit..");
        jButton1.setToolTipText("");
        jButton1.setMargin(new java.awt.Insets(2, 2, 2, 2));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jSeasonPanel.add(jButton1);
        jButton1.setBounds(150, 50, 50, 23);

        jSeasonField.setEditable(false);
        jSeasonField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jSeasonPanel.add(jSeasonField);
        jSeasonField.setBounds(60, 50, 80, 20);

        jLabel4.setText("Season");
        jSeasonPanel.add(jLabel4);
        jLabel4.setBounds(10, 50, 60, 14);

        jControls1Panel.add(jSeasonPanel);

        jPanel20.setLayout(null);

        jPanel20.setMaximumSize(new java.awt.Dimension(16000, 32767));
        jCatagoriesButton.setText("Catagories");
        jCatagoriesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCatagoriesButtonActionPerformed(evt);
            }
        });

        jPanel20.add(jCatagoriesButton);
        jCatagoriesButton.setBounds(10, 10, 90, 23);

        jControls1Panel.add(jPanel20);

        getContentPane().add(jControls1Panel);

        jControls2Panel.setLayout(new javax.swing.BoxLayout(jControls2Panel, javax.swing.BoxLayout.X_AXIS));

        jControls2Panel.setMaximumSize(new java.awt.Dimension(32000, 70));
        jControls2Panel.setMinimumSize(new java.awt.Dimension(640, 70));
        jControls2Panel.setPreferredSize(new java.awt.Dimension(640, 70));
        jPanel21.setMaximumSize(new java.awt.Dimension(10, 32767));
        jControls2Panel.add(jPanel21);

        jPanel4.setLayout(null);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Rearing Constrants", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 0)));
        jPanel4.setMaximumSize(new java.awt.Dimension(32767, 70));
        jPanel4.setPreferredSize(new java.awt.Dimension(0, 70));
        jMinRearingDepthText.setValue(minRearingDepth);
        jMinRearingDepthText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMinRearingDepthTextActionPerformed(evt);
            }
        });

        jPanel4.add(jMinRearingDepthText);
        jMinRearingDepthText.setBounds(70, 20, 30, 20);

        jLabel9.setText("Max Depth");
        jPanel4.add(jLabel9);
        jLabel9.setBounds(120, 20, 70, 14);

        jMaxRearingDepthText.setValue(maxRearingDepth);
        jMaxRearingDepthText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMaxRearingDepthTextActionPerformed(evt);
            }
        });

        jPanel4.add(jMaxRearingDepthText);
        jMaxRearingDepthText.setBounds(180, 20, 30, 20);

        jLabel10.setText("Min Depth");
        jPanel4.add(jLabel10);
        jLabel10.setBounds(10, 20, 60, 14);

        jControls2Panel.add(jPanel4);

        jPanel22.setMaximumSize(new java.awt.Dimension(10, 32767));
        jControls2Panel.add(jPanel22);

        jPanel2.setLayout(null);

        jOrphanedNestsCBox.setText("Orphaned Nests");
        jOrphanedNestsCBox.getModel().setSelected(orphanedNests);
        jOrphanedNestsCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOrphanedNestsCBoxActionPerformed(evt);
            }
        });

        jPanel2.add(jOrphanedNestsCBox);
        jOrphanedNestsCBox.setBounds(0, 10, 120, 23);

        jDeepNestsCBox.setText("Deep Nests");
        jDeepNestsCBox.getModel().setSelected(deepNests);
        jDeepNestsCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeepNestsCBoxActionPerformed(evt);
            }
        });

        jPanel2.add(jDeepNestsCBox);
        jDeepNestsCBox.setBounds(0, 30, 100, 23);

        jCalcDailyCBox.setText("Calc Daily");
        jCalcDailyCBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCalcDailyCBoxActionPerformed(evt);
            }
        });

        jPanel2.add(jCalcDailyCBox);
        jCalcDailyCBox.setBounds(130, 30, 90, 23);

        jRetainPeriodCBox.setText("Static Period");
        jPanel2.add(jRetainPeriodCBox);
        jRetainPeriodCBox.setBounds(130, 10, 100, 23);

        jControls2Panel.add(jPanel2);

        jRunButton.setText("Run");
        jRunButton.setToolTipText("Calculate fish acres for the selected are and time period.");
        jRunButton.setEnabled(false);
        jRunButton.setMaximumSize(new java.awt.Dimension(90, 23));
        jRunButton.setMinimumSize(new java.awt.Dimension(90, 23));
        jRunButton.setPreferredSize(new java.awt.Dimension(90, 23));
        jRunButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRunButtonActionPerformed(evt);
            }
        });

        jControls2Panel.add(jRunButton);

        jPanel23.setMaximumSize(new java.awt.Dimension(20, 32767));
        jPanel23.setMinimumSize(new java.awt.Dimension(20, 10));
        jPanel23.setPreferredSize(new java.awt.Dimension(20, 10));
        jControls2Panel.add(jPanel23);

        getContentPane().add(jControls2Panel);

        jFileMenu.setText("File");
        jOpenMenuItem.setText("Open");
        jOpenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MainWindow.this.actionPerformed(evt);
            }
        });

        jFileMenu.add(jOpenMenuItem);

        jPrefsItems.setText("Preferences ...");
        jPrefsItems.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPrefsItemsActionPerformed(evt);
            }
        });

        jFileMenu.add(jPrefsItems);

        jAboutItem.setText("About");
        jAboutItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAboutItemActionPerformed(evt);
            }
        });

        jFileMenu.add(jAboutItem);

        jMenuBar.add(jFileMenu);

        setJMenuBar(jMenuBar);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-647)/2, (screenSize.height-602)/2, 647, 602);
    }// </editor-fold>//GEN-END:initComponents

    private void jAboutItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAboutItemActionPerformed
        aboutWindow.setVisible(true);
    }//GEN-LAST:event_jAboutItemActionPerformed

    private void jCatagoriesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCatagoriesButtonActionPerformed
        catagoryWindow.setVisible(true);
    }//GEN-LAST:event_jCatagoriesButtonActionPerformed

    private void jOutputPathFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOutputPathFieldActionPerformed
            outputDirPath = jOutputPathField.getText();
            prefs.put("Output Directory",outputDirPath);
    }//GEN-LAST:event_jOutputPathFieldActionPerformed

    private void jCalcDailyCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCalcDailyCBoxActionPerformed
       recordDaily = jCalcDailyCBox.getModel().isSelected();
       prefs.putBoolean("Record Daily",recordDaily);
    }//GEN-LAST:event_jCalcDailyCBoxActionPerformed

    private void jMaxRearingDepthTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMaxRearingDepthTextActionPerformed
        if (jMaxRearingDepthText.getValue() instanceof Integer)
        {
            Integer i = (Integer) jMaxRearingDepthText.getValue();
            maxRearingDepth = i.intValue();
        }

        prefs.putDouble("Max Rearing Depth",maxRearingDepth);
    }//GEN-LAST:event_jMaxRearingDepthTextActionPerformed

    private void jMinRearingDepthTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMinRearingDepthTextActionPerformed
         if (jMinRearingDepthText.getValue() instanceof Double)
        {
            Double d = (Double) jMinRearingDepthText.getValue();
            minRearingDepth = d.doubleValue();
        }

        prefs.putDouble("Min Rearing Depth",minRearingDepth);
    }//GEN-LAST:event_jMinRearingDepthTextActionPerformed

    private void jDeepNestsCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeepNestsCBoxActionPerformed
       deepNests = jDeepNestsCBox.getModel().isSelected();
       prefs.putBoolean("Deep Nests",deepNests);
    }//GEN-LAST:event_jDeepNestsCBoxActionPerformed

    private void jOrphanedNestsCBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOrphanedNestsCBoxActionPerformed
       orphanedNests = jOrphanedNestsCBox.getModel().isSelected();
       prefs.putBoolean("Orphaned Nests",orphanedNests);
    }//GEN-LAST:event_jOrphanedNestsCBoxActionPerformed

    private void jOutputPathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOutputPathButtonActionPerformed

        javax.swing.JFileChooser  fc;

        fc = new javax.swing.JFileChooser ();               // make the file chooser
        fc.setFileSelectionMode(fc.DIRECTORIES_ONLY);       // display files only
            fc.setCurrentDirectory( new java.io.File(outputDirPath) );                  // open the last directory

        int rval;
        rval = fc.showOpenDialog(this);       // show the dialog
        if ( rval == fc.CANCEL_OPTION )
        {
            return;
        }
        else if ( rval == fc.APPROVE_OPTION)
        {
            outputDirPath = fc.getSelectedFile().getAbsolutePath();
            jOutputPathField.setText( outputDirPath);

            prefs.put("Output Directory",outputDirPath);
        }
        else
        {
            // some error occured
        }
    }//GEN-LAST:event_jOutputPathButtonActionPerformed

    private void jPrefsItemsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPrefsItemsActionPerformed
        PrefDialog pd = new PrefDialog(this,true);

        pd.setDataList(stageDataStrings);
        pd.setAreaList(stageAreaStrings);

        String s1 = new String(stageDataStrings);
        String s2 = new String(stageAreaStrings);

        pd.setVisible(true);

        if ( ! pd.cancel() )
        {
            stageDataStrings = pd.getDataList();
            stageAreaStrings = pd.getAreaList();

            prefs.put("Stage Data Strings",stageDataStrings);
            prefs.put("Stage Area Strings",stageAreaStrings);
        }

        // if the data selection strings changed reload the DSS File
        if ( s1.equals(stageDataStrings) == false )
        {
            loadDSSFile();
        }
        else
        {

            // force the stage area stings to update
            if ( s2.equals(stageAreaStrings) == false )
            {
                int pos = jStageTable.getSelectedRow();
                if ( jStageTable.getRowCount() > 0 && pos != -1 )
                {
                    jStageTable.clearSelection();
                    jStageTable.addRowSelectionInterval(pos,pos);
                }
            }
        }


    }//GEN-LAST:event_jPrefsItemsActionPerformed

    private void jMinDepthTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMinDepthTextActionPerformed
         if (jMinDepthText.getValue() instanceof Double)
        {
            Double d = (Double) jMinDepthText.getValue();
            minDepth = d.doubleValue();
        }

        prefs.putDouble("Min Depth",minDepth);
    }//GEN-LAST:event_jMinDepthTextActionPerformed

    private void jMaxDepthTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMaxDepthTextActionPerformed
        if (jMaxDepthText.getValue() instanceof Integer)
        {
            Double d = (Double) jMaxDepthText.getValue();
            maxDepth = d.doubleValue();
        }

        prefs.putDouble("Max Depth",maxDepth);
    }//GEN-LAST:event_jMaxDepthTextActionPerformed

    private void jStopTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jStopTextFocusLost

    }//GEN-LAST:event_jStopTextFocusLost

    private void jStartTextFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jStartTextFocusLost

    }//GEN-LAST:event_jStartTextFocusLost

    private void jStopTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jStopTextFocusGained
        jStopText.selectAll();
    }//GEN-LAST:event_jStopTextFocusGained

    private void jStartTextFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jStartTextFocusGained
        jStartText.selectAll();
    }//GEN-LAST:event_jStartTextFocusGained

    private void jDurFieldFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jDurFieldFocusGained
        jDurField.selectAll();
    }//GEN-LAST:event_jDurFieldFocusGained

    private void jDurFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDurFieldActionPerformed
        if (jDurField.getValue() instanceof Integer)
        {
            Integer i = (Integer) jDurField.getValue();
            periodDays = i.intValue();
        }

        prefs.putInt("Duration",periodDays);
    }//GEN-LAST:event_jDurFieldActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // make the dialog
        DateDialog dd = new DateDialog(this,true);

        java.awt.Rectangle windowBounds;
        java.awt.Rectangle dialogBounds;
        windowBounds = getBounds();
        dialogBounds = dd.getBounds();

        dialogBounds.x = (int)(windowBounds.getCenterX() - (dialogBounds.getWidth() / 2));
        dialogBounds.y = (int)(windowBounds.getCenterY() - (dialogBounds.getHeight() / 2));
        dd.setBounds(dialogBounds);

        // set the displayed dates
        dd.setInitalMonth(seasonStartMonth);
        dd.setInitalDay(seasonStartDay);
        dd.setFinalMonth(seasonStopMonth);
        dd.setFinalDay(seasonStopDay);

        // show the dialog
        dd.setVisible(true);

        //get the new dates
        seasonStartMonth = dd.getInitalMonth();
        seasonStartDay = dd.getInitalDay();
        seasonStopMonth = dd.getFinalMonth();
        seasonStopDay = dd.getFinalDay();

        //write the new values to the preferences
        prefs.putInt("Season Start Month",seasonStartMonth);
        prefs.putInt("Season Start Day",seasonStartDay);
        prefs.putInt("Season Stop Month",seasonStopMonth);
        prefs.putInt("Season Stop Day",seasonStopDay);

        jSeasonField.setText("" + seasonStartMonth + "/" + seasonStartDay + " - "
            + seasonStopMonth +  "/" + seasonStopDay);

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jRunButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRunButtonActionPerformed
        //force update of min depth
        try
        {
            jMinDepthText.commitEdit();
        }
        catch( ParseException e )
        {

        }

        if (jMinDepthText.getValue() instanceof Integer)
        {
            Double d = (Double) jMinDepthText.getValue();
            minDepth = d.doubleValue();
        }

        prefs.putDouble("Min Depth",minDepth);

        //force update of max depth
        try
        {
            jMaxDepthText.commitEdit();
        }
        catch( ParseException e )
        {

        }

        if (jMaxDepthText.getValue() instanceof Double)
        {
            Double d = (Double) jMaxDepthText.getValue();
            maxDepth = d.doubleValue();
        }

        prefs.putDouble("Max Depth",maxDepth);

        //force update of Duration
        try
        {
            jDurField.commitEdit();
        }
        catch( ParseException e)
        {

        }

        // force update of duration field
        if (jDurField.getValue() instanceof Integer)
        {
            Integer i = (Integer) jDurField.getValue();
            periodDays = i.intValue();
        }
        prefs.putInt("Duration",periodDays);

         //force update of min depth
        try
        {
            jMinRearingDepthText.commitEdit();
        }
        catch( ParseException e )
        {

        }

        if (jMinRearingDepthText.getValue() instanceof Double)
        {
            Double d = (Double) jMinRearingDepthText.getValue();
            minRearingDepth = d.doubleValue();
        }

        prefs.putDouble("Min Rearing Depth",minRearingDepth);

        //force update of max rearing depth
        try
        {
            jMaxRearingDepthText.commitEdit();
        }
        catch( ParseException e )
        {

        }

        if (jMaxRearingDepthText.getValue() instanceof Double)
        {
            Double d = (Double) jMaxRearingDepthText.getValue();
            maxRearingDepth = d.doubleValue();
        }

        prefs.putDouble("Max Rearing Depth",maxRearingDepth);

        int firstYear = Integer.parseInt(jStartText.getText());
        int lastYear = Integer.parseInt(jStopText.getText());

        runRange(firstYear,lastYear,getWindowBeginStr(),getWindowEndStr());

    }//GEN-LAST:event_jRunButtonActionPerformed

    void jStageTableValueChanged(javax.swing.event.ListSelectionEvent e)
    {
        //Ignore extra messages.
        if (e.getValueIsAdjusting()) return;

        javax.swing.ListSelectionModel lsm =
            (javax.swing.ListSelectionModel)e.getSource();
        if (lsm.isSelectionEmpty())
        {
           //no rows are selected
        }
        else
        {
            // get the selected indes
            int idx = jStageTable.getSelectionModel().getMinSelectionIndex();

            // get the current path parts
            String[] dRange = ((String) stagePathsModel.getValueAt(idx,3)).split(" - ");

            //construct the inital path
            StringBuffer path = new StringBuffer();
            path.append("/");
            path.append(stagePathsModel.getValueAt(idx,0));
            path.append("/");
            path.append(stagePathsModel.getValueAt(idx,1));
            path.append("/");
            path.append(stagePathsModel.getValueAt(idx,2));
            path.append("/");
            path.append(dRange[0]);
            path.append("/");
            path.append(stagePathsModel.getValueAt(idx,4));
            path.append("/");
            path.append(stagePathsModel.getValueAt(idx,5));

            //set the path in the dss file
            currentPath = (path.toString());

            if ( ! jRetainPeriodCBox.isSelected() )
            {
                //set the window to incompass all data initally

                jStartText.setText(dRange[0].substring(5));
                jStopText.setText(dRange[1].substring(5));
            }

            areaPathsModel.setRowCount(0);
            String buffer;
            String[] parts;
            java.util.Vector paths = new java.util.Vector();
            stageAreaStr = stageAreaStrings.split(":");
            for(int k = 0; k < stageAreaStr.length; ++k)
            {
            pd.searchDSSCatalog("",(String) stagePathsModel.getValueAt(idx,1), stageAreaStr[k],"","", "", paths);
                for(int j = 0; j < paths.size(); ++j)
                {
                    buffer = ((String) paths.elementAt(j)).substring(1);
                    parts = buffer.split("/");
                    areaPathsModel.addRow(parts);
                }

                if (areaPathsModel.getRowCount() > 0 )
                {
                    jAreaTable.clearSelection();
                    jAreaTable.addRowSelectionInterval(0,0);
                }
            }


            jRunButton.setEnabled(true);
        }
    }

    private void jAreaTableValueChanged(javax.swing.event.ListSelectionEvent e)
    {
        //Ignore extra messages.
        if (e.getValueIsAdjusting()) return;

        javax.swing.ListSelectionModel lsm =
            (javax.swing.ListSelectionModel)e.getSource();
        if (lsm.isSelectionEmpty())
        {
           //no rows are selected
        } else
        {
            int selectedRow = lsm.getMinSelectionIndex();
            pd.setPathname(  "/" + (String) areaPathsModel.getValueAt(selectedRow, 0) +
                             "/" + (String) areaPathsModel.getValueAt(selectedRow, 1) +
                             "/" + (String) areaPathsModel.getValueAt(selectedRow, 2) +
                             "/" + (String) areaPathsModel.getValueAt(selectedRow, 3) +
                             "/" + (String) areaPathsModel.getValueAt(selectedRow, 4) +
                             "/" + (String) areaPathsModel.getValueAt(selectedRow, 5) + "/" );

        }
    }

    private void actionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_actionPerformed
        // TODO add your handling code here:

        javax.swing.JFileChooser  fc;

        if ( evt.getSource() == jDssFileBrowseButton || evt.getSource() == jOpenMenuItem)
        {
            fc = new javax.swing.JFileChooser ();               // make the file chooser
            fc.setFileSelectionMode(fc.FILES_ONLY); // display files only
            fc.setCurrentDirectory(lastFile);       // open the last directory
            fc.setAcceptAllFileFilterUsed(false);   // do not display all files

            // set the file filter to return only DSS files

            fc.setFileFilter(new javax.swing.filechooser.FileFilter(){
                public boolean accept(java.io.File f)
                {
                    String ext = getExtension(f);

                    if ( f.isDirectory() )
                        return true;
                    else if ( ext == null)
                    {
                        return false;
                    }
                    else if ( ext.equals("dss"))
                        return true;
                    else
                        return false;
                }

                public String getDescription()
                {
                    return new String("DSS File filter");
                }

                private String getExtension(java.io.File f) {
                String ext = null;
                String s = f.getName();
                int i = s.lastIndexOf('.');

                if (i > 0 &&  i < s.length() - 1) {
                  ext = s.substring(i+1).toLowerCase();
                }
                return ext;
    }
            });
            int rval;
            rval = fc.showOpenDialog(this);       // show the dialog
            if ( rval == fc.CANCEL_OPTION )
            {
                return;
            }
            else if ( rval == fc.APPROVE_OPTION)
            {
                lastFile = fc.getSelectedFile();
                fileLoaded = true;
                jDSSFilename.setText( lastFile.getAbsolutePath());

                prefs.put("Last DSS File Opened",lastFile.getAbsolutePath());
                loadDSSFile();
            }
            else
            {
                // some error occured
            }


        }
    }//GEN-LAST:event_actionPerformed

    /**
     * load the user selected DSS file
     */

    public void loadDSSFile()
    {
        int rv;

        // close the old time series if one exists
        closeDSSFile();

        // make a new time series
        ts = new HecTimeSeries();
        pd = new HecPairedData();

        // open the interfaces to the dss file
        rv = ts.setDSSFileName(lastFile.getAbsolutePath(),true);
        rv = pd.setDSSFileName(lastFile.getAbsolutePath(),true);


        java.util.Vector paths = new java.util.Vector();

        rv = ts.searchDSSCatalog("",paths);

        outer: for ( int i = 0; i < paths.size(); ++i )
        {
            // get the selected path and added it to the display list
            String selectedPath = (String) paths.elementAt(i);

            // break the selected path into segments
            String[] selectedParts = selectedPath.substring(1).split("/");

            // make sure the c part is a legal part for stage data
            boolean legal = false;
            for( int j = 0; j < stageDataStr.length; ++j)
            {
                if(stageDataStr[j].equals(selectedParts[2]))
                {
                    legal = true;
                    break;
                }
            }

            // if the cpart isnt legal go to the next path
            if ( legal == false)
            {
                continue;
            }

           String currentPath;
           String[] currentParts;

           ++i;
           do
           {
            //advance to the next path and get it
            currentPath = (String) paths.elementAt(i);
            currentParts = currentPath.substring(1).split("/");
           } while ( selectedParts[0].equals(currentParts[0]) &&
                     selectedParts[1].equals(currentParts[1]) &&
                     selectedParts[2].equals(currentParts[2]) &&
                     selectedParts[4].equals(currentParts[4]) &&
                     selectedParts[5].equals(currentParts[5]) &&
                     ++i < paths.size() );

           --i;
           currentPath = (String) paths.elementAt(i);
           currentParts = currentPath.substring(1).split("/");

           // make the display string that hold D range
           java.util.Vector path = new java.util.Vector();
           path.add(selectedParts[0]);
           path.add(selectedParts[1]);
           path.add(selectedParts[2]);
           path.add(selectedParts[3] + " - " + currentParts[3]);
           path.add(selectedParts[4]);
           path.add(selectedParts[5]);

           stagePathsModel.addRow(path);

        }

        jStageTable.clearSelection();

        if ( jStageTable.getRowCount() > 0)
        {
            jStageTable.addRowSelectionInterval(0,0);
        }
    }

    /**
     * Close the the file pointed to by the Timeseries Refernce and set it yo null
     */

    private void closeDSSFile()
    {
        if ( ts != null )
        {
            // tell the dss library that io with this file is done
            ts.done();

            //c lose the file
            ts.close();

            // remove the reference
            ts = null;
        }

        if ( pd != null )
        {
            // tell the dss library that io with this file is done
            pd.done();

            //c lose the file
            pd.close();

            // remove the reference
            pd = null;
        }

        // clear the path display list
        stagePathsModel.setRowCount(0);
    }


    /**
     * run model on the time period indicated in the text boxes
     **/

    private void runRange(int startYear, int stopYear, String startDate, String stopDate)
    {
       StringBuffer buffer = new StringBuffer();
       String tmp;
       HecTime startTime;
       HecTime stopTime;

       //read the stage area curve
       int size = stopYear-startYear+1;
       stageAreaCurve = new PairedDataContainer();
       int rv = pd.read(stageAreaCurve); //Error at this line

       if ( rv == -2)
       {
           javax.swing.JOptionPane.showMessageDialog(this,
                   "No dat found in Stage Area Curve",
                   "Missing Data",
                   javax.swing.JOptionPane.ERROR_MESSAGE);
       }
       else if ( rv == - 2)
       {
           javax.swing.JOptionPane.showMessageDialog(this,
                   "Could not read Stage Area Curve",
                   "Corrupt DSS File",
                   javax.swing.JOptionPane.ERROR_MESSAGE);
       }

       buffer.setLength(0);
       buffer.append(currentPath);

       years = new intArrayContainer(size);
       yearSpawningArea = new HecDoubleArray(size);
       yearRearingArea = new HecDoubleArray(size);
       yearTotalArea = new HecDoubleArray(size);
       yearAvgStage = new HecDoubleArray(size);
       yearMaxSpawningArea = new HecDoubleArray(size);
       yearMaxRearingArea = new HecDoubleArray(size);
       yearMaxTotalArea = new HecDoubleArray(size);
       yearMaxStage = new HecDoubleArray(size);
       yearMinSpawningArea = new HecDoubleArray(size);
       yearMinRearingArea = new HecDoubleArray(size);
       yearMinTotalArea = new HecDoubleArray(size);
       yearMinStage = new HecDoubleArray(size);

       for(int i = 0; i < size; ++i )
       {
            int pos1, pos2;

            pos1 = buffer.indexOf("/",1);    // 2nd /
            pos1 = buffer.indexOf("/",pos1+1); // 3rd /
            pos1 = buffer.indexOf("/",pos1+1); // 4th /
            pos2 = buffer.indexOf("/",pos1+1); // 5th /

            // make the path for the current year
            tmp = startDate + (startYear+i);
            buffer.replace(pos1+1, pos2, tmp);

            // get the window start time
            startTime = new HecTime(tmp);
            startTime.add(hec.heclib.util.HecTime.DAY_INCREMENT);

            // get the window stop time
            tmp = stopDate + (startYear+i);
            stopTime = new HecTime(tmp);
            stopTime.add(hec.heclib.util.HecTime.DAY_INCREMENT);

            if ( stopTime.compareTimes(startTime) == -1 )
            {
                tmp = stopDate + (startYear+i+1);
                stopTime = new HecTime(tmp);
                stopTime.add(hec.heclib.util.HecTime.DAY_INCREMENT);
            }

            // store the path that will be used for data
            tmp = buffer.toString();

            // set the path
            ts.setPathname(tmp);

            // set the path
            ts.setTimeWindow(startTime,stopTime);

            if ( i == 0 )
            {
                initYearBuffer();
            }

            sAvg = 0;
            rAvg = 0;
            tAvg = 0;
            stageAvg = 0;
            sMax = 0;
            rMax = 0;
            tMax = 0;
            stageMax = 0;
            sMin = 0;
            rMin = 0;
            tMax = 0;
            stageMin = 0;

            getYearAverages();

            years.array[i] = startYear + i;
            yearSpawningArea.set(i,sAvg);
            yearRearingArea.set(i,rAvg);
            yearTotalArea.set(i,tAvg);
            yearAvgStage.set(i,stageAvg);
            yearMaxSpawningArea.set(i,sMax);
            yearMaxRearingArea.set(i,rMax);
            yearMaxTotalArea.set(i,tMax);
            yearMaxStage.set(i,stageMax);
            yearMinSpawningArea.set(i,sMin);
            yearMinRearingArea.set(i,rMin);
            yearMinTotalArea.set(i,tMin);
            yearMinStage.set(i,stageMin);
       }

       if ( recordDaily )
       {
           dWriter = null;
           bufferStageAreaCurves();
       }

       displayResults();
    }

    /**
     *  Calculate the rearing spwaning and total acres for a year.
     *  Years with fatal data read acres report a value of -1
     **/

    private void getYearAverages()
    {
        doubleArrayContainer vals = new doubleArrayContainer();


        dailyTime = new HecTimeArray();

        int rv = ts.read(dailyTime,vals);

        updateDailyArrays();

        if ( rv == -2 || rv == -3 )
        {
            rAvg = -1;
            sAvg = -1;
            tAvg = -1;
            rMax = -1;
            sMax = -1;
            tMax = -1;
            rMin = -1;
            sMin = -1;
            tMin = -1;
        }

        // get the rearing acres
        rAvg = getYearRearingAverage2(vals);

        //get the spawning acres
        sAvg = getYearSpawningAverage2(vals);

        //get the total acres
        tAvg = getYearTotalAverage2(vals);

        stageAvg = getYearStageAverage2(vals);

        // get the max rearing area for the year
        rMax = dailyRearing.maximum().value();

        // get the max spawning for the year
        sMax = dailySpawning.maximum().value();

        // get the max weet acres for the year
        tMax = dailyTotal.maximum().value();

        // get the max stage for the year
        stageMax = dailyStage.maximum().value();

        // get the min rearing area for the year
        rMin = dailyRearing.minimum().value();

        // get the max spawning for the year
        sMin = dailySpawning.minimum().value();

        // get the max weet acres for the year
        tMin = dailyTotal.minimum().value();

        // get the min stage for the year
        stageMin = dailyStage.minimum().value();

        bufferYearData();
    }

    private String getWindowBeginStr()
    {
        StringBuffer buffer = new StringBuffer();

        if ( seasonStartDay < 10)
        {
            buffer.append("0");
        }

        buffer.append(seasonStartDay);
        buffer.append(getMonthName(seasonStartMonth));

        return buffer.toString();
    }

     private String getWindowEndStr()
    {
        StringBuffer buffer = new StringBuffer();

        if ( seasonStopDay < 10)
        {
            buffer.append("0");
        }

        buffer.append(seasonStopDay);
        buffer.append(getMonthName(seasonStopMonth));

        return buffer.toString();
    }

    private String getMonthName(int m)
    {
        switch(m)
        {
            case 1:
                return "JAN";

            case 2:
                return "FEB";

             case 3:
                return "MAR";

            case 4:
                return "APR";

            case 5:
                return "MAY";

            case 6:
                return "JUN";

             case 7:
                return "JUL";

            case 8:
                return "AUG";

             case 9:
                return "SEP";

            case 10:
                return "OCT";

             case 11:
                return "NOV";

            case 12:
                return "DEC";

            default:
                return "JAN";
        }
    }

    private double getYearSpawningAverage(doubleArrayContainer vals)
    {
        double total = 0, hVal, lVal;

        int num = vals.array.length - periodDays + 1;

        for( int i = 0; i < num; ++i )
        {
            double hs = getMaxSpawningStage(vals,i);
            double ls = getMinSpawningStage(vals,i);
            hVal = getAreaForStage(hs,1);
            lVal = getAreaForStage(ls,1);

            // get the viable spawning area for this window
            total += (hVal > lVal) ? hVal - lVal : 0;
        }

        return total /= num;
    }

    private double getYearSpawningAverage2(doubleArrayContainer vals)
    {
        double total = 0, hVal, lVal, val;

        int num = vals.array.length - periodDays + 1;

        for( int i = 0; i < num; ++i )
        {
            double hs = getMaxSpawningStage(vals,i);
            double ls = getMinSpawningStage(vals,i);
            hVal = getAreaForStage(hs,1);
            lVal = getAreaForStage(ls,1);

            // get the viable spawning area for this window
            val = (hVal > lVal) ? hVal - lVal : 0;

            dailySpawning.set(i,val);

            total += val;
        }

        return total /= num;
    }

    private double getYearRearingAverage(doubleArrayContainer vals)
    {
        double total = 0, hVal, lVal;

        int num = vals.array.length - periodDays + 1;

        for( int i = 0; i < num; ++i )
        {
            double hs = getMaxRearingStage(vals,i);
            double ls = getMinRearingStage(vals,i);
            hVal = getAreaForStage(hs,1);
            lVal = getAreaForStage(ls,1);

            // get the viable spawning area for this window
            total += (hVal > lVal) ? hVal - lVal : 0;
        }

        return total /= num;
    }

    private double getYearRearingAverage2(doubleArrayContainer vals)
    {
        double total = 0, hVal, lVal, val;

        int num = vals.array.length - periodDays + 1;

        for( int i = 0; i < num; ++i )
        {
            double hs = getMaxRearingStage(vals,i);
            double ls = getMinRearingStage(vals,i);
            hVal = getAreaForStage(hs,1);
            lVal = getAreaForStage(ls,1);

            // get the viable spawning area for this window
            val = (hVal > lVal) ? hVal - lVal : 0;

            dailyRearing.set(i,val);

            total += val;
        }

        return total /= num;
    }

    private double getYearTotalAverage(doubleArrayContainer vals)
    {
        double total = 0;

        for( int i = 0; i < vals.array.length; ++i)
        {
            total += getAreaForStage(vals.array[i],0);
        }

        return total / vals.array.length;

    }

    private double getYearTotalAverage2(doubleArrayContainer vals)
    {
        double val, total = 0;

        for( int i = 0; i < vals.array.length; ++i)
        {
            val = getAreaForStage(vals.array[i],0);

            dailyTotal.set(i,val);

            total += val;
        }

        return total / vals.array.length;

    }

    private double getYearStageAverage(doubleArrayContainer vals)
    {
        double total = 0;

        for( int i = 0; i < vals.array.length; ++i)
        {
            total += vals.array[i];
        }

        return total / vals.array.length;
    }

    private double getYearStageAverage2(doubleArrayContainer vals)
    {
        double val, total = 0;

        for( int i = 0; i < vals.array.length; ++i)
        {
            val = vals.array[i];

            dailyStage.set(i,val);

            total += val;
        }

        return total / vals.array.length;
    }



    private double getAreaForStage(double stage,int num)
    {
        int pos1, pos2;
        double low_stage, high_stage;

        int hStage;
        int lStage;

        double val1, val2;

        if ( num >= stageAreaCurve.yOrdinates.length )
        {
            num = 0;
        }

        if ( stage == (int) stage )
        {
            pos1 = java.util.Arrays.binarySearch(stageAreaCurve.xOrdinates,(int) stage);
            return (pos1 >= 0) ? stageAreaCurve.yOrdinates[num][pos1] : 0;
        }
        else
        {
           // get the integer bounding indecies of the stage, the curve should contain at least the integers
           pos1 = java.util.Arrays.binarySearch(stageAreaCurve.xOrdinates,(int) stage);
           pos2 = java.util.Arrays.binarySearch(stageAreaCurve.xOrdinates,(int) stage+1);

           if ( pos1 >= 0 && pos2 >= 0)
           {
               double low_error = stage - stageAreaCurve.xOrdinates[pos1];
               double high_error = stageAreaCurve.xOrdinates[pos2] - stage;

               // check to see if the curve records any intermediate points between the integers
               for( int i = pos1 +1; i < pos2; ++i)
               {
                    double val = stageAreaCurve.xOrdinates[i];
                    if ( val < stage )
                    {
                        double new_low_error = stage - val;

                        if ( new_low_error < low_error )
                        {
                            low_error = new_low_error;
                            pos1 = i;
                        }
                    }
                    else if ( val > stage )
                    {
                        double new_high_error = val - stage;

                        if ( new_high_error < high_error )
                        {
                            high_error = new_high_error;
                            pos2 = i;
                        }
                    }
                    else    // it is possible that the curve has the exact value
                    {
                        return stageAreaCurve.yOrdinates[num][i];
                    }
               }

               low_stage = stageAreaCurve.xOrdinates[pos1];
               high_stage = stageAreaCurve.xOrdinates[pos2];

               val1 = stageAreaCurve.yOrdinates[num][pos1];
               val2 = stageAreaCurve.yOrdinates[num][pos2];

               double l = high_stage - low_stage;
               double scale = (stage - low_stage) / 1;
               double iscale = 1 - scale;

               return (iscale * val1) + (scale * val2);
           }
           else if ( pos1 >= 0 )
           {
               return stageAreaCurve.yOrdinates[num][pos1];
           }
           else if ( pos2 >= 0 )
           {
               return stageAreaCurve.yOrdinates[num][pos2];
           }
           else
           {
               return 0;
           }
       }
    }

    private double getMinStage(doubleArrayContainer vals, int idx, int window)
    {
        double min = vals.array[idx];
        for( int i = idx; i < idx+window; ++i)
        {
            if ( vals.array[i] < min)
            {
                min = vals.array[i];
            }

        }

        return min;

    }

    private double getMaxStage(doubleArrayContainer vals, int idx, int window)
    {
        double max = vals.array[idx];
        for( int i = idx; i < idx+window; ++i)
        {
            if ( vals.array[i] > max)
            {
                max = vals.array[i];
            }

        }

        return max;

    }

    private double getMaxRearingStage(doubleArrayContainer vals, int i)
    {
        return vals.array[i] - minRearingDepth;
    }

    private double getMinRearingStage(doubleArrayContainer vals, int i)
    {
        return vals.array[i] - maxRearingDepth;
    }

    private double getMaxSpawningStage(doubleArrayContainer vals, int i)
    {
        double hs = getMinStage(vals,i,periodDays);

        if ( orphanedNests )
        {
           if ( hs > vals.array[i] - minDepth )
           {
                hs = vals.array[i] - minDepth;
           }
        }
        else
        {
            hs -= minDepth;
        }

        return hs;
    }

    private double getMinSpawningStage(doubleArrayContainer vals, int i)
    {
        if ( deepNests )
        {
             return vals.array[i] - maxDepth;
        }
        else
        {
             return getMaxStage(vals,i,periodDays) - maxDepth;
        }
    }


    void displayResults()
    {
        java.util.ArrayList<EvfCatagory> catagory = catagoryWindow.getCatagories();
        DecimalFormat df1 = new DecimalFormat("#,##0.0");

        int numCatagories = catagory.size();

        StringBuffer buffer = new StringBuffer();

        buffer.append("DSS File:\t");
        buffer.append(ts.DSSFileName());
        buffer.append("\n");

        buffer.append("Stage Elevatopn Path:\t");
        buffer.append(ts.pathname());
        buffer.append("\n");

        buffer.append("Stage Area Path:\t");
        buffer.append(pd.pathname());
        buffer.append("\n");

        buffer.append("Time Window:\t");
        buffer.append(jSeasonField.getText() + "\n");
        buffer.append("Duration: " + periodDays + " Days\n");
        buffer.append("Min Spawning Depth: " + minDepth + " Feet\n");
        buffer.append("Max Spawning Depth: " + maxDepth + " Feet\n");
        buffer.append("Min Rearing Depth: " + minRearingDepth + " Feet\n");
        buffer.append("Max Rearing Depth: " + maxRearingDepth + " Feet\n");
        buffer.append("Count Orphaned Areas: " + Boolean.toString(orphanedNests));
        buffer.append("\nCount Deep Areas " + Boolean.toString(deepNests));
        buffer.append("\n\n");

        buffer.append("Year\tAvg Stage\tAvg Total\tAvg Restricted\tAvg Spawning\t");
        for( int i = 0; i < numCatagories; ++i)
        {
            buffer.append("Avg Total ");
            buffer.append(catagory.get(i).getName());
            buffer.append("\t");
            buffer.append("Avg Restricted ");
            buffer.append(catagory.get(i).getName());
            buffer.append("\t");
            buffer.append("Avg Spawning ");
            buffer.append(catagory.get(i).getName());
            buffer.append("\t");
        }
        buffer.append("Max Stage\tMax Total\tMax Restricted\tMax Spawning\t");
        for( int i = 0; i < numCatagories; ++i)
        {
            buffer.append("Max Total ");
            buffer.append(catagory.get(i).getName());
            buffer.append("\t");
            buffer.append("Max Restricted ");
            buffer.append(catagory.get(i).getName());
            buffer.append("\t");
            buffer.append("Max Spawning ");
            buffer.append(catagory.get(i).getName());
            buffer.append("\t");
        }
        buffer.append("Min Stage\tMin Total\tMin Restricted\tMin Spawning\t");
                for( int i = 0; i < numCatagories; ++i)
        {
            buffer.append("Min Total ");
            buffer.append(catagory.get(i).getName());
            buffer.append("\t");
            buffer.append("Min Restricted ");
            buffer.append(catagory.get(i).getName());
            buffer.append("\t");
            buffer.append("Min Spawning ");
            buffer.append(catagory.get(i).getName());
            buffer.append("\t");
        }
        buffer.append("\n");
        buffer.append("\t\tRearing\tRearing\t\t");
        for( int i = 0; i < numCatagories; ++i)
        {
            buffer.append("Rearing\tRearing\t\t");
        }
        buffer.append("\t\tRearing\tRearing\t");
        for( int i = 0; i < numCatagories; ++i)
        {
            buffer.append("Rearing\tRearing\t\t");
        }
        buffer.append("\t\tRearing\tRearing\t\t");
        for( int i = 0; i < numCatagories; ++i)
        {
            buffer.append("Rearing\tRearing\t\t");
        }
        buffer.append("\n\n");

        for(int i = 0; i < years.array.length; ++i )
        {
            buffer.append(years.array[i]);
            buffer.append("\t");
            buffer.append(yearAvgStage.element(i).string(1,true));
            buffer.append("\t");
            buffer.append(yearTotalArea.element(i).string(1,true));
            buffer.append("\t");
            buffer.append(yearRearingArea.element(i).string(1,true));
            buffer.append("\t");
            buffer.append(yearSpawningArea.element(i).string(1,true));
            buffer.append("\t");
            for( int j = 0; j < numCatagories; ++j)
            {
                buffer.append(df1.format(yearTotalArea.element(i).value()*catagory.get(j).getAmount()));
                buffer.append("\t");
                buffer.append(df1.format(yearRearingArea.element(i).value()*catagory.get(j).getAmount()));
                buffer.append("\t");
                buffer.append(df1.format(yearSpawningArea.element(i).value()*catagory.get(j).getAmount()));
                buffer.append("\t");
            }
            buffer.append(yearMaxStage.element(i).string(1,true));
            buffer.append("\t");
            buffer.append(yearMaxTotalArea.element(i).string(1,true));
            buffer.append("\t");
            buffer.append(yearMaxRearingArea.element(i).string(1,true));
            buffer.append("\t");
            buffer.append(yearMaxSpawningArea.element(i).string(1,true));
            buffer.append("\t");
                        for( int j = 0; j < numCatagories; ++j)
            {
                buffer.append(df1.format(yearMaxTotalArea.element(i).value()*catagory.get(j).getAmount()));
                buffer.append("\t");
                buffer.append(df1.format(yearMaxRearingArea.element(i).value()*catagory.get(j).getAmount()));
                buffer.append("\t");
                buffer.append(df1.format(yearMaxSpawningArea.element(i).value()*catagory.get(j).getAmount()));
                buffer.append("\t");
            }
            buffer.append(yearMinStage.element(i).string(1,true));
            buffer.append("\t");
            buffer.append(yearMinTotalArea.element(i).string(1,true));
            buffer.append("\t");
            buffer.append(yearMinRearingArea.element(i).string(1,true));
            buffer.append("\t");
            buffer.append(yearMinSpawningArea.element(i).string(1,true));
            buffer.append("\t");
            for( int j = 0; j < numCatagories; ++j)
            {
                buffer.append(df1.format(yearMinTotalArea.element(i).value()*catagory.get(j).getAmount()));
                buffer.append("\t");
                buffer.append(df1.format(yearMinRearingArea.element(i).value()*catagory.get(j).getAmount()));
                buffer.append("\t");
                buffer.append(df1.format(yearMinSpawningArea.element(i).value()*catagory.get(j).getAmount()));
                buffer.append("\t");
            }
            buffer.append("\n");
        }


        buffer.append("\nAverage Season Stage\t");
        buffer.append(yearAvgStage.average());
        buffer.append("\n");
        buffer.append("Min Average Season Stage\t");
        buffer.append(yearAvgStage.minimum());
        buffer.append("\n");
        buffer.append("Max Average Season Stage\t");
        buffer.append(yearAvgStage.maximum());
        buffer.append("\n\n");

        buffer.append("Period Averages\n");
        buffer.append("Avg Total\tAvg Restricted\tAvg Spawning\t");
        buffer.append("Max Total\tMax Restricted\tMax Spawning\t");
        buffer.append("Min Total\tMin Restricted\tMin Spawning\n");
        buffer.append("Rearing\tRearing\t\tRearing\tRearing\t\tRearing\tRearing\n");
        buffer.append(yearTotalArea.average().string(1,true));
        buffer.append("\t");
        buffer.append(yearRearingArea.average().string(1,true));
        buffer.append("\t");
        buffer.append(yearSpawningArea.average().string(1,true));
        buffer.append("\t");
        buffer.append(yearMaxTotalArea.average().string(1,true));
        buffer.append("\t");
        buffer.append(yearMaxRearingArea.average().string(1,true));
        buffer.append("\t");
        buffer.append(yearMaxSpawningArea.average().string(1,true));
        buffer.append("\t");
        buffer.append(yearMinTotalArea.average().string(1,true));
        buffer.append("\t");
        buffer.append(yearMinRearingArea.average().string(1,true));
        buffer.append("\t");
        buffer.append(yearMinSpawningArea.average().string(1,true));
        buffer.append("\n");

        String fileName =  ts.aPart() + "_" + ts.bPart() + "_" + ts.fPart();
        if ( orphanedNests || deepNests)
        {
            fileName += "_";
            if ( orphanedNests) fileName += "o";
            if ( deepNests) fileName += "d";
        }
        fileName += ".evf";
        String filePath = outputDirPath + "/" + fileName;
        try
        {
            java.io.FileWriter writer = new java.io.FileWriter(filePath);
            writer.write(buffer.toString());
            writer.close();
        }
        catch(java.io.IOException io_excep)
        {
           javax.swing.JOptionPane.showMessageDialog(this,
                   "Error writing file " + filePath,
                   "IOError",
                   javax.swing.JOptionPane.ERROR_MESSAGE);

        }

        ReportDisplay rd = new ReportDisplay();
        rd.setText(buffer.toString());
        rd.setTitle(fileName);
        rd.setVisible(true);

        if ( recordDaily )
        {
            displayDailyResults();
        }
    }

    private void displayDailyResults()
    {
        try
        {
            dWriter = new java.io.FileWriter("daily_results.txt");

            dWriter.write(dBuffer.toString());
            dWriter.flush();


        }
        catch( java.io.IOException e)
        {
            javax.swing.JOptionPane.showMessageDialog(this,
                   "Error writing file " + "daily_results.txt",
                   "IOError",
                   javax.swing.JOptionPane.ERROR_MESSAGE);
        }

        ReportDisplay rd = new ReportDisplay();
        rd.setText(dBuffer.toString());
        rd.setTitle("daily_results.txt");
        rd.setVisible(true);

    }

    private void bufferStageAreaCurves()
    {

        dBuffer.append("\n\nStage Area Curves\n\n");
        dBuffer.append("Stage\t");

        int len = stageAreaCurve.yOrdinates.length;
        for( int i = 1; i <= len; ++i )
        {
            dBuffer.append("Area " + i + "\t");
        }
        dBuffer.append("\n");

        for( int i = 0; i < stageAreaCurve.xOrdinates.length; ++i)
        {
            dBuffer.append(stageAreaCurve.xOrdinates[i]);
            dBuffer.append("\t");

            for( int j = 0; j < len; ++j )
            {
                dBuffer.append(stageAreaCurve.yOrdinates[j][i]);
                dBuffer.append("\t");
            }

            dBuffer.append("\n");
        }


    }

    private void initYearBuffer()
    {
        dBuffer = new StringBuffer();
        dBuffer.append("DSS File:\t");
        dBuffer.append(ts.DSSFileName());
        dBuffer.append("\n");

        dBuffer.append("Stage Elevatopn Path:\t");
        dBuffer.append(ts.pathname());
        dBuffer.append("\n");

        dBuffer.append("Stage Area Path:\t");
        dBuffer.append(pd.pathname());
        dBuffer.append("\n");

        dBuffer.append("Time Window:\t");
        dBuffer.append(jSeasonField.getText() + "\n");
        dBuffer.append("Duration: " + periodDays + " Days\n");
        dBuffer.append("Min Spawning Depth: " + minDepth + " Feet\n");
        dBuffer.append("Max Rearing Depth: " + maxDepth + " Feet\n");
        dBuffer.append("Min Rearing Depth: " + minRearingDepth + " Feet\n");
        dBuffer.append("Max Rearing Depth: " + maxRearingDepth + " Feet\n");
        dBuffer.append("Count Orphaned Areas: " + Boolean.toString(orphanedNests));
        dBuffer.append("\nCount Deep Areas " + Boolean.toString(deepNests));
        dBuffer.append("\n\n");

        dBuffer.append("Year\tStage\tTotal\tRestricted\tSpawning\n");
        dBuffer.append("\t\tRearing\tRearing\n");
    }

    private void bufferYearData()
    {

        for(int i = 0; i < dailyTime.getIntArray().length; ++i )
        {
            dBuffer.append( dailyTime.element(i).month() + "/"  +
                            dailyTime.element(i).day() + "/"  +
                            dailyTime.element(i).year());
            dBuffer.append("\t");
            dBuffer.append( dailyStage.element(i).string(1,true) );
            dBuffer.append("\t");
            dBuffer.append( dailyTotal.element(i).string(1,true ) );
            dBuffer.append("\t");
            dBuffer.append( dailyRearing.element(i).string(1,true) );
            dBuffer.append("\t");
            dBuffer.append( dailySpawning.element(i).string(1,true));
            dBuffer.append("\n");
        }
    }

    private void updateDailyArrays()
    {
        int size = dailyTime.getIntArray().length;

        if ( dailyStage == null )
        {
            dailyStage = new HecDoubleArray(size);
        }
        else
        {
            dailyStage.setSize(size);
        }

        if ( dailyTotal == null )
        {
            dailyTotal = new HecDoubleArray(size);
        }
        else
        {
            dailyTotal.setSize(size);
        }

         if ( dailyRearing == null )
        {
            dailyRearing = new HecDoubleArray(size);
        }
        else
        {
            dailyRearing.setSize(size);
        }

        if ( dailySpawning == null )
        {
            dailySpawning = new HecDoubleArray(size);
        }
        else
        {
            dailySpawning.setSize(size);
        }


    }

     class DurationVerifier extends javax.swing.InputVerifier {

         public boolean verify(javax.swing.JComponent input) {
               javax.swing.JTextField tf = (javax.swing.JTextField) input;
               try
               {
                    periodDays = Integer.parseInt(tf.getText());
                    prefs.putInt("Duration",periodDays);
                    return true;
               }
               catch( NumberFormatException e)
               {
                   return false;
               }
         }
         
     }
 
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem jAboutItem;
    private javax.swing.JTable jAreaTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCalcDailyCBox;
    private javax.swing.JButton jCatagoriesButton;
    private javax.swing.JPanel jControls1Panel;
    private javax.swing.JPanel jControls2Panel;
    private javax.swing.JPanel jCurvePathPanel;
    private javax.swing.JTextField jDSSFilename;
    private javax.swing.JCheckBox jDeepNestsCBox;
    private javax.swing.JButton jDssFileBrowseButton;
    private javax.swing.JFormattedTextField jDurField;
    private javax.swing.JMenu jFileMenu;
    private javax.swing.JPanel jFilePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JFormattedTextField jMaxDepthText;
    private javax.swing.JFormattedTextField jMaxRearingDepthText;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JFormattedTextField jMinDepthText;
    private javax.swing.JFormattedTextField jMinRearingDepthText;
    private javax.swing.JMenuItem jOpenMenuItem;
    private javax.swing.JCheckBox jOrphanedNestsCBox;
    private javax.swing.JButton jOutputPathButton;
    private javax.swing.JTextField jOutputPathField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JMenuItem jPrefsItems;
    private javax.swing.JCheckBox jRetainPeriodCBox;
    private javax.swing.JButton jRunButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField jSeasonField;
    private javax.swing.JPanel jSeasonPanel;
    private javax.swing.JPanel jSpacer1;
    private javax.swing.JPanel jSpacer2;
    private javax.swing.JPanel jSpawningPanel;
    private javax.swing.JPanel jStagePathPanel;
    private javax.swing.JTable jStageTable;
    private javax.swing.JFormattedTextField jStartText;
    private javax.swing.JFormattedTextField jStopText;
    // End of variables declaration//GEN-END:variables
    
    //User Variables
    private java.io.File lastFile;
    private boolean fileLoaded;
    private HecTimeSeries ts;
    private HecPairedData pd;
    private PairedDataContainer stageAreaCurve;
    private String currentPath;
    private intArrayContainer years;
    private HecDoubleArray yearSpawningArea;
    private HecDoubleArray yearRearingArea;
    private HecDoubleArray yearTotalArea;
    private HecDoubleArray yearAvgStage;
    private HecDoubleArray yearMaxSpawningArea;
    private HecDoubleArray yearMaxRearingArea;
    private HecDoubleArray yearMaxTotalArea;
    private HecDoubleArray yearMaxStage;
    private HecDoubleArray yearMinSpawningArea;
    private HecDoubleArray yearMinRearingArea;
    private HecDoubleArray yearMinTotalArea;
    private HecDoubleArray yearMinStage;
    private double sAvg;
    private double rAvg;
    private double tAvg;
    private double sMax;
    private double rMax;
    private double tMax;
    private double sMin;
    private double rMin;
    private double tMin;    
    private double stageAvg;
    private double stageMax;
    private double stageMin;
    private int periodDays;
    
    javax.swing.text.NumberFormatter df;
    javax.swing.text.NumberFormatter df2;
    javax.swing.text.NumberFormatter df3;
    javax.swing.text.NumberFormatter df4;
    javax.swing.text.NumberFormatter df5;   
    javax.swing.text.MaskFormatter yf1;
    javax.swing.text.MaskFormatter yf2;
    
    //Table variables
    
    javax.swing.table.DefaultTableModel stagePathsModel;
    javax.swing.table.DefaultTableModel areaPathsModel;
    
    //Prefences variables
    private Preferences prefs;
    private String stageDataStrings;
    private String stageAreaStrings;
    private String[] stageDataStr;
    private String[] stageAreaStr;
    private String outputDirPath;
    private int seasonStartDay;
    private int seasonStopDay;
    private int seasonStartMonth;
    private int seasonStopMonth;
    private double maxDepth;
    private double minDepth;
    private double minRearingDepth;
    private double maxRearingDepth;
    private boolean orphanedNests;
    private boolean deepNests;
    
    private boolean recordDaily;
    private HecTimeArray dailyTime;
    private HecDoubleArray dailyStage;
    private HecDoubleArray dailyRearing;
    private HecDoubleArray dailySpawning;
    private HecDoubleArray dailyTotal;
    private StringBuffer dBuffer;
    private java.io.FileWriter dWriter;
    
    // window variables
    CatagoryWindow catagoryWindow;
    AboutWindow aboutWindow;
}
